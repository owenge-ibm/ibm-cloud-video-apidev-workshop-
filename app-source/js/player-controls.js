$(document)
		.ready(
				function() {

					/*
					 * Load functions when parent page's Document object is
					 * ready.
					 * 
					 * Build the channel and video selection lists based on
					 * content generated by the server code.
					 * 
					 * Load functions to: trap click events of Streaming Manager
					 * Player control buttons set the Streaming Manager Player
					 * quality when the quality selection field changes populate
					 * the quality selection field options with data from
					 * Streaming Manager Player quality event trap dynamic
					 * events from the Streaming Manager Player create listener
					 * objects for the various Streaming Manager Player events
					 */

					// Build channel and video selection lists for the Player
					// and Upload tabs based on content loaded from current
					// account
					// Create arrays of the acquired account content
					var channels = document.getElementsByClassName('channel');
					var videos = document.getElementsByClassName('video');
					
					// Create targets for both Player select fields
					var channelField = document.getElementById("load-channel");
					var videoField = document.getElementById("load-video");

					// Create targets for the Upload select fields
					var channelUpload = document.getElementById("upload-channel");

					// Create targets for both Player buttons
					//var channelButton = document.getElementById('channel-button');
					//var videoButton = document.getElementById('video-button');

					// Prepopulate the player with the first channel
					var player = document.getElementById("UstreamIframe");
					player.src = "https://www.ustream.tv/embed/"
							+ channels[0].id + "?html5ui";

					// Clear the existing selection fields
					for (i = channelField.options.length - 1; i >= 0; i--) {
						channelField.remove(i);
					}
					for (i = videoField.options.length - 1; i >= 0; i--) {
						videoField.remove(i);
					}
					for (i = channelUpload.options.length - 1; i >= 0; i--) {
						channelUpload.remove(i);
					}

					// Create default entry
					var newOptCP = document.createElement('option');
					newOptCP.value = "";
					newOptCP.innerText = "Select a channel";
					var newOptCU = document.createElement('option');
					newOptCU.value = "";
					newOptCU.innerText = "Select a channel";
					var newOptV = document.createElement('option');
					newOptV.value = "";
					newOptV.innerText = "Select a video";

					// Prepopulate the Player channel and video selections
					channelField.add(newOptCP);
					videoField.add(newOptV);
					
					// Prepopulate the Upload channel selections
					channelUpload.add(newOptCU);

					var newOpt;
					// Create a selection option for each content entry
					for (i = 0; i < channels.length; i++) {
						newOpt = document.createElement('option');
						newOpt.value = channels[i].id;
						newOpt.innerText = channels[i].innerText;

						channelField.add(newOpt);
					}
					for (i = 0; i < channels.length; i++) {
						newOpt = document.createElement('option');
						newOpt.value = channels[i].id;
						newOpt.innerText = channels[i].innerText;

						channelUpload.add(newOpt);
					}					
					for (i = 0; i < videos.length; i++) {
						newOpt = document.createElement('option');
						newOpt.value = videos[i].id;
						newOpt.innerText = videos[i].innerText;

						videoField.add(newOpt);
					}

					/*
					 * Embedded player management section
					 */
					// load Streaming Manager viewer object for the Player
					viewer = UstreamEmbed("UstreamIframe");

					// Load a function to trap clicks of the various video
					// control buttons
					$('.video-button')
							.click(
									function(e) {

										e.preventDefault();

										var elementTarget = $(e.currentTarget);
										var control = elementTarget[0].className.match(/control-([a-zA-Z0-9\-]*)/);

										if (control && control[1]) {

											switch (control[1]) {

											case "play":
												viewer.callMethod('play');
												console.log("Play: ", "method called from page");
												break;

											case "pause":
												viewer.callMethod('pause');
												break;

											case "seek":
												var seekField = document.getElementById("Seek");
												var position = seekField.value;

												viewer.callMethod('seek', position);

												break;

											case "load-channel":
											case "load-video":
												clearFields();

												// Extract the relevant page
												// fields
												var resourceField = document
														.getElementById(control[1]);
												var resourceId = resourceField.options[resourceField.selectedIndex].value;
												var resourceTitle = resourceField.options[resourceField.selectedIndex].text;

												// Show the content title
												document
														.getElementById("player-title").textContent = resourceTitle;

												var contentType = control[1]
														.substring(5);
												// Load the content- channel or
												// video
												viewer
														.callMethod('load',
																contentType,
																resourceId);

												// Expose controls based on
												// content type
												if (contentType == "channel") {
													document
															.getElementById('player-status').style.display = "block";
													document
															.getElementById('player-stats').style.display = "none";
												} else {
													document
															.getElementById('player-status').style.display = "none";
													document
															.getElementById('player-stats').style.display = "block";

													// Set up the recurring
													// progress indicator
													var refreshId = setInterval(
															progress_monitor,
															10000);
												}

												// Now expose the player block
												document
														.getElementById('player-block').style.display = "block";

												break;
											} // End of switch
										} // End of if (control && control[1])
									}); // End of button click function

					// Whenever the quality selection changes, call the player
					// with the new value
					$('.quality-selector').change(
							function() {
								console.log("update player with quality", $(this).val());
								viewer.callMethod('quality', $(this).val());
							});

					// Retrieve progress of player content periodically
					var progress_monitor = function() {
						viewer.getProperty('progress', function(progress) {
							var myProgress = timeFormat(progress);
							document.getElementById("VideoProgress").textContent = myProgress;
							});
					};

					// Use quality event data to repopulate the quality
					// selection options
					var populateQualitySelector = function(qualityData) {
						var list = $('.quality-selector');
						list.empty();

						// The quality data is an array of current quality
						// values
						for ( var id in qualityData) {
							list.append('<option value="' + id + '" ' + (qualityData[id].selected ? 'selected="selected"' : '') + '>' + qualityData[id].label + '</option>');
							console.log("new quality entry", id + " = " + qualityData[id].label);
						}

						// Updating value of the custom select gui element
						list.next().find('span').text("Current quality: " + list.find('option:selected').text());
					}

					// Clear some data fields that are relevant to content
					var clearFields = function() {
						populateQualitySelector({});
						$('#VideoProgress').val('');
						$('#VideoDuration').val('');
						$('.st-ended').hide();
						$('.st-playing').hide();
						$('.st-offline').hide();
						$('.st-live').hide();
					}

					// Event handler for events received from the embed iframe
					var onEmbedEvent = function(event, data) {
						console.log(event, data);
						switch (event) {

						case "ready":
							clearFields();
							break;

						case "quality":
							populateQualitySelector(data);
							break;

						case "live":
							$('.st-live').show();
							$('.st-offline').hide();
							break;

						case "offline":
							$('.st-offline').show();
							$('.st-live').hide();
							$('.st-playing').hide();
							break;

						case "playing":
							if (data) {
								$('.st-playing').show()
								$('.st-offline').hide();
								$('.st-ended').hide();
							} else {
								$('.st-playing').hide();
								$('.st-offline').show();
							}
							break;

						case "finished":
							$('.st-ended').show();
							$('.st-playing').hide();
							break;

						case "duration":
							viewer.getProperty('duration', function(duration) {
								console.log("playing duration function", duration);
								myDuration = timeFormat(duration);
								document.getElementById("VideoDuration").textContent = myDuration;
								});
							break;

						}
					}

					// Add listener functions for various viewer events
					viewer.addListener('ready', onEmbedEvent);
					viewer.addListener('quality', onEmbedEvent);
					viewer.addListener('live', onEmbedEvent);
					viewer.addListener('offline', onEmbedEvent);
					viewer.addListener('playing', onEmbedEvent);
					viewer.addListener('finished', onEmbedEvent);
					viewer.addListener('size', onEmbedEvent);
					viewer.addListener('duration', onEmbedEvent);

				})